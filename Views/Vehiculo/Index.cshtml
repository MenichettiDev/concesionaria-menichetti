@using System.Text.Json
@model IEnumerable<Vehiculo>

@if (TempData["SuccessMessage"] != null)
{
    <script>
        Swal.fire({
            icon: 'success',
            title: '¡Éxito!',
            text: '@TempData["SuccessMessage"]',
            confirmButtonText: 'Cerrar',
            customClass: {
                popup: 'rounded shadow'
            }
        });
    </script>
}

@if (ViewBag.ErrorMessage != null)
{
    <div class="alert alert-danger">@ViewBag.ErrorMessage</div>
}

@{
    ViewData["Title"] = "Vehículos Activos";
    var rnd = new Random();
}

<h1 class="mb-4"><i class="bi bi-car-front"></i> Mis Vehículos</h1>

<p>
    <a asp-action="Create" class="btn btn-success">
        <i class="bi bi-plus-circle-fill"></i> Cargar Nuevo Vehículo
    </a>
</p>

<div id="filtros" class="mb-4 p-3 bg-light rounded shadow-sm">
    <div class="row g-2">
        <div class="col-md-3">
            <label class="form-label">Marca</label>
            <input type="text" v-model="marca" @@input="filtrarSugerencias" class="form-control" placeholder="Escribí una marca" autocomplete="off">
            <ul v-if="sugerencias.length > 0" class="list-group position-absolute mt-1 shadow" style="z-index: 1000;">
                <li 
                    class="list-group-item list-group-item-action" 
                    v-for="s in sugerencias" 
                    @@click="seleccionarMarca(s)">
                    {{ s }}
                </li>
            </ul>
            </input>   
        </div>

        <div class="col-md-3">
            <label class="form-label">Modelo</label>
            <input type="text" v-model="modelo" @@input="filtrarSugerenciasModelo" class="form-control" placeholder="Escribí un modelo" autocomplete="off">
            <ul v-if="sugerenciasModelo.length > 0" class="list-group position-absolute mt-1 shadow" style="z-index: 1000;">
                <li 
                    class="list-group-item list-group-item-action" 
                    v-for="s in sugerenciasModelo" 
                    @@click="seleccionarModelo(s)">
                    {{ s }}
                </li>
            </ul>
        </div>
        
        <div class="col-md-3">
            <label class="form-label">Año desde</label>
            <select v-model="anoDesde" class="form-select">
                <option value="">Seleccionar año</option>
                <option v-for="anio in anios" :key="'desde-' + anio" :value="anio">{{ anio }}</option>
                <option value="otro">Otro...</option>
            </select>
        </div>

        <div class="col-md-3">
            <label class="form-label">Año hasta</label>
            <select v-model="anoHasta" class="form-select">
                <option value="">Seleccionar año</option>
                <option v-for="anio in anios" :key="'hasta-' + anio" :value="anio">{{ anio }}</option>
                <option value="otro">Otro...</option>
            </select>
        </div>


        <div class="col-md-3">
            <label class="form-label">Estado</label>
            <select v-model="estado" class="form-select">
                <option value="1">Activo</option>
                <option value="0">Inactivo</option>
            </select>
        </div>


        <div class="col-md-3 d-flex align-items-end gap-2">
            <button @@click="filtrar" class="btn btn-primary w-50" type="button">
                <i class="bi bi-funnel-fill"></i> Filtrar
            </button>
            <button @@click="limpiarFiltros" class="btn btn-secondary w-50" type="button">
                <i class="bi bi-x-circle"></i> Limpiar Filtros
            </button>
        </div>
    </div>
</div>

<table class="table table-bordered table-hover shadow-sm align-middle bg-white table-striped">
    <thead class="table-dark">
        <tr>
            <th>ID</th>
            <th>Marca</th>
            <th>Modelo</th>
            <th>Año</th>
            <th>Estado</th>
            <th><i class="bi bi-gear-fill"></i> Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var vehiculo in Model)
        {
            <tr>
                <td>@vehiculo.Id</td>
                <td>@vehiculo.Marca</td>
                <td>@vehiculo.Modelo</td>
                <td>@vehiculo.Año</td>
                <td>
                    <span class="badge @(vehiculo.Estado == 1 ? "bg-success" : "bg-danger")">
                        @(vehiculo.Estado == 1 ? "Activo" : "Inactivo")
                    </span>
                </td>
                <td class="text-nowrap">
                    <a asp-action="Details" asp-route-id="@vehiculo.Id" class="btn btn-outline-info btn-sm" title="Detalles">
                        <i class="bi bi-info-circle-fill"></i>
                    </a>
                    <a asp-action="Edit" asp-route-id="@vehiculo.Id" class="btn btn-outline-warning btn-sm" title="Editar">
                        <i class="bi bi-pencil-square"></i>
                    </a>
                    @if (vehiculo.Estado == 1)
                    {
                        <a asp-action="Delete" asp-route-id="@vehiculo.Id" class="btn btn-outline-danger btn-sm" title="Eliminar">
                            <i class="bi bi-slash-circle"></i>
                        </a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="d-flex justify-content-between mb-3">
    <div>
        Página @ViewBag.PaginaActual de @ViewBag.TotalPaginas
    </div>
    <div>
        @if (ViewBag.PaginaActual > 1)
        {
            <a class="btn btn-outline-primary" href="@Url.Action("Index", new {
                page = ViewBag.PaginaActual - 1,
                marca = Context.Request.Query["marca"],
                estado = Context.Request.Query["estado"],
                ano = Context.Request.Query["ano"]
            })">
                Anterior
            </a>
        }

        @if (ViewBag.PaginaActual < ViewBag.TotalPaginas)
        {
            <a class="btn btn-outline-primary" href="@Url.Action("Index", new {
                page = ViewBag.PaginaActual + 1,
                marca = Context.Request.Query["marca"],
                estado = Context.Request.Query["estado"],
                ano = Context.Request.Query["ano"]
            })">
                Siguiente
            </a>
        }
    </div>
</div>

<nav aria-label="Paginación de vehículos" class="mt-4">
    <ul class="pagination justify-content-center">
        @{
            int totalPaginas = ViewBag.TotalPaginas;
            int paginaActual = ViewBag.PaginaActual;
        }

        @for (int i = 1; i <= totalPaginas; i++)
        {
            var url = Url.Action("Index", new {
                page = i,
                marca = Context.Request.Query["marca"],
                estado = Context.Request.Query["estado"],
                anoDesde = Context.Request.Query["anoDesde"],
                anoHasta = Context.Request.Query["anoHasta"]
            });

            <li class="page-item @(i == paginaActual ? "active" : "")">
                <a class="page-link" href="@url">@i</a>
            </li>
        }
    </ul>
</nav>

@section Scripts {
    <script>
        new Vue({
            el: '#filtros',
            data: {
                marca: '@Context.Request.Query["marca"]',
                modelo: '@Context.Request.Query["modelo"]',
                anios: Array.from({ length: 25 }, (_, i) => new Date().getFullYear() - i),
                anoDesde: '@Context.Request.Query["anoDesde"]',
                anoHasta: '@Context.Request.Query["anoHasta"]',
                estado: '@Context.Request.Query["estado"]',
                modelos: @Html.Raw(JsonSerializer.Serialize(Model.Select(v => v.Modelo).Distinct())),
                marcas: @Html.Raw(JsonSerializer.Serialize(Model.Select(v => v.Marca).Distinct())),
                sugerencias: [],
                sugerenciasModelo: []
            },

            methods: {
                filtrarSugerencias() {
                    if (this.marca.length < 3) {
                        this.sugerencias = [];
                        return;
                    }
                    const texto = this.marca.toLowerCase();
                    this.sugerencias = this.marcas.filter(m => m.toLowerCase().includes(texto));
                },
                seleccionarMarca(marcaSeleccionada) {
                    this.marca = marcaSeleccionada;
                    this.sugerencias = [];
                },
                filtrar() {
                    const params = new URLSearchParams();
                    if (this.marca) params.append("marca", this.marca);
                    if (this.estado) params.append("estado", this.estado);
                    if (this.anoDesde && this.anoDesde !== "otro") params.append("anoDesde", this.anoDesde);
                    if (this.anoHasta && this.anoHasta !== "otro") params.append("anoHasta", this.anoHasta);
                    if (this.modelo) params.append("modelo", this.modelo);
                    console.log(params.toString());
                    window.location.href = "/Vehiculo/Index?" + params.toString();
                },
                filtrarSugerenciasModelo() {
                    if (this.modelo.length < 3) {
                        this.sugerenciasModelo = [];
                        return;
                    }
                    const texto = this.modelo.toLowerCase();
                    this.sugerenciasModelo = this.modelos.filter(m => m.toLowerCase().includes(texto));
                },
                seleccionarModelo(modeloSeleccionado) {
                    this.modelo = modeloSeleccionado;
                    this.sugerenciasModelo = [];
                },
                limpiarFiltros() {
                    this.marca = '';
                    this.modelo = '';
                    this.estado = '';
                    this.ano = '';
                    window.location.href = "/Vehiculo/Index";
                }
            }
        });
    </script>
}
